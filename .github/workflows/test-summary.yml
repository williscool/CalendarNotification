name: Test Summary

on:
  workflow_run:
    workflows: ["CNPlus CI (Android) App Build"]
    types:
      - completed

jobs:
  test-summary:
    name: Generate Test Summary
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion != 'cancelled' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ${{ github.event.workflow_run.workflow_id }}
          run_id: ${{ github.event.workflow_run.id }}
          path: artifacts
          
      - name: Publish Unit Test Summary
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: 'Unit Tests Summary'
          path: 'artifacts/unit-test-results/android/app/build/test-results/test*DebugUnitTest/**/*.xml'
          reporter: java-junit
          fail-on-error: false
          use-actions-summary: true
          badge-title: 'Unit Tests'
          
      - name: Publish Integration Test Summary
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: 'Integration Tests Summary'
          path: 'artifacts/android-test-coverage-report/android/app/build/outputs/**/connected/**/TEST-*.xml'
          reporter: java-junit
          fail-on-error: false
          use-actions-summary: true
          badge-title: 'Integration Tests'
          
      - name: Publish Combined Test Report
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: 'Combined Test Report'
          path: |
            artifacts/unit-test-results/android/app/build/test-results/test*DebugUnitTest/**/*.xml
            artifacts/android-test-coverage-report/android/app/build/outputs/**/connected/**/TEST-*.xml
          reporter: java-junit
          fail-on-error: false
          only-summary: true
          use-actions-summary: true
          badge-title: 'All Tests'
          
      # Extract and display the code coverage from JaCoCo reports
      - name: Process Code Coverage Summary
        if: always()
        run: |
          echo "## ðŸ“Š Code Coverage" >> $GITHUB_STEP_SUMMARY
          
          # First, check if there's a coverage-report-html artifact with the placeholder file
          if [ -d "artifacts/coverage-report-html" ] && [ -f "artifacts/coverage-report-html/index.html" ]; then
            echo "JaCoCo HTML report is available in the artifacts." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check if coverage badge files exist
          if [ -d "artifacts/coverage-badges" ]; then
            if [ -f "artifacts/coverage-badges/jacoco.svg" ] && [ -f "artifacts/coverage-badges/jacoco.json" ]; then
              LINE_COVERAGE=$(cat artifacts/coverage-badges/jacoco.json | jq -r '.coverage')
              COVERED_LINES=$(cat artifacts/coverage-badges/jacoco.json | jq -r '.covered')
              MISSED_LINES=$(cat artifacts/coverage-badges/jacoco.json | jq -r '.missed')
              TOTAL_LINES=$(cat artifacts/coverage-badges/jacoco.json | jq -r '.branches.total')
              
              echo "### Line Coverage: ${LINE_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
              echo "- Covered Lines: ${COVERED_LINES}" >> $GITHUB_STEP_SUMMARY
              echo "- Missed Lines: ${MISSED_LINES}" >> $GITHUB_STEP_SUMMARY
              echo "- Total Lines: ${TOTAL_LINES}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            else
              echo "No line coverage data available." >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -f "artifacts/coverage-badges/branches.json" ]; then
              BRANCH_COVERAGE=$(cat artifacts/coverage-badges/branches.json | jq -r '.coverage')
              COVERED_BRANCHES=$(cat artifacts/coverage-badges/branches.json | jq -r '.covered')
              MISSED_BRANCHES=$(cat artifacts/coverage-badges/branches.json | jq -r '.missed')
              TOTAL_BRANCHES=$(cat artifacts/coverage-badges/branches.json | jq -r '.total')
              
              echo "### Branch Coverage: ${BRANCH_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
              echo "- Covered Branches: ${COVERED_BRANCHES}" >> $GITHUB_STEP_SUMMARY
              echo "- Missed Branches: ${MISSED_BRANCHES}" >> $GITHUB_STEP_SUMMARY
              echo "- Total Branches: ${TOTAL_BRANCHES}" >> $GITHUB_STEP_SUMMARY
            else
              echo "No branch coverage data available." >> $GITHUB_STEP_SUMMARY
            fi
          else
            # Look for raw reports
            XML_COUNT=0
            HTML_COUNT=0
            
            if [ -d "artifacts/android-test-coverage-report" ]; then
              XML_COUNT=$(find artifacts/android-test-coverage-report -name "*.xml" | grep -i jacoco | wc -l)
              HTML_COUNT=$(find artifacts/android-test-coverage-report -name "*.html" | grep -i jacoco | wc -l)
            fi
            
            echo "### Coverage Data" >> $GITHUB_STEP_SUMMARY
            if [ "$XML_COUNT" -gt 0 ] || [ "$HTML_COUNT" -gt 0 ]; then
              echo "JaCoCo reports found. Please check the artifacts for detailed coverage information." >> $GITHUB_STEP_SUMMARY
              echo "Raw XML files: $XML_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "HTML report files: $HTML_COUNT" >> $GITHUB_STEP_SUMMARY
            else
              echo "No coverage data found. Test coverage may not have been generated in this run." >> $GITHUB_STEP_SUMMARY
              echo "This may be expected for new projects or projects without coverage instrumentation." >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
      - name: Add Coverage Badge to Summary
        if: always()
        run: |
          echo "### Coverage Visualization" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "artifacts/coverage-badges" ] && [ -f "artifacts/coverage-badges/jacoco.svg" ] && [ -f "artifacts/coverage-badges/jacoco.json" ]; then
            echo "![Coverage](https://img.shields.io/badge/Coverage-$(cat artifacts/coverage-badges/jacoco.json | jq -r '.coverage')%25-$(cat artifacts/coverage-badges/jacoco.json | jq -r 'if .coverage >= 80 then "success" elif .coverage >= 60 then "yellow" else "critical" end'))" >> $GITHUB_STEP_SUMMARY
            
            if [ -f "artifacts/coverage-badges/branches.svg" ] && [ -f "artifacts/coverage-badges/branches.json" ]; then
              echo "![Branch Coverage](https://img.shields.io/badge/Branch_Coverage-$(cat artifacts/coverage-badges/branches.json | jq -r '.coverage')%25-$(cat artifacts/coverage-badges/branches.json | jq -r 'if .coverage >= 80 then "success" elif .coverage >= 60 then "yellow" else "critical" end'))" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "No coverage badges available. Using placeholder badges instead." >> $GITHUB_STEP_SUMMARY
            echo "![Coverage](https://img.shields.io/badge/Coverage-unknown-lightgrey)" >> $GITHUB_STEP_SUMMARY
            echo "![Branch Coverage](https://img.shields.io/badge/Branch_Coverage-unknown-lightgrey)" >> $GITHUB_STEP_SUMMARY
          fi 