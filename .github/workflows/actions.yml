name: CNPlus CI (Android) App Build

env:
  # The name of the main module repository
  main_project_module: app

  # The name of the Play Store
  app_name: "Calendar Notifications Plus"

  app_file_name_prefix: "calendar_notifications_plus"

  # Explicitly set CI flag to true for our Gradle task
  CI: true

on:
  push:
    tags:
      - '**'
  pull_request:
    branches:
      - "**" # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#patterns-to-match-branches-and-tags

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test-coverage-report:
    runs-on: ubuntu-latest
    env:
      ENTRY_FILE: "index.tsx"
    timeout-minutes: 30
    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: "yarn"

    - name: Expose yarn config as "$GITHUB_OUTPUT"
      id: yarn-config
      shell: bash
      run: |
        echo "CACHE_FOLDER=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
  
    - name: Restore yarn cache
      uses: actions/cache@v3
      id: yarn-download-cache
      with:
        path: ${{ steps.yarn-config.outputs.CACHE_FOLDER }}
        key: yarn-download-cache-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          yarn-download-cache-

    - name: Restore yarn install state
      id: yarn-install-state-cache
      uses: actions/cache@v3
      with:
        path: .yarn/ci-cache/
        key: ${{ runner.os }}-yarn-install-state-cache-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

    - run: yarn install --immutable --inline-builds
      env:
        YARN_ENABLE_GLOBAL_CACHE: 'false'
        YARN_NM_MODE: 'hardlinks-local'
        YARN_INSTALL_STATE_PATH: .yarn/ci-cache/install-state.gz
        HUSKY: '0'
    
    - name: Setup react-native-safe-area-context mock
      run: node scripts/setup_safe_area_mock.js

    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4.0.0
      with:
        cache-read-only: ${{ github.ref != 'refs/heads/main' }}
        gradle-home-cache-cleanup: true

    - name: Grant execute permission for gradlew
      run: cd android && chmod +x gradlew

    - name: Setup Android Virtual Device
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 34
        target: google_apis
        arch: x86_64
        profile: 7.6in Foldable
        script: |
          adb logcat -c
          adb logcat -s "ReactNativeJS" "ReactNative" "AndroidRuntime" "System.err" &
          adb logcat > emulator.log &

    - name: Run Android Tests with Coverage
      run: cd android && ./gradlew connectedAndroidTest jacocoAndroidTestReport

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: android-test-coverage-report
        path: android/app/build/reports/jacoco/jacocoAndroidTestReport/
        retention-days: 90

    - name: Upload Emulator Log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: emulator-log
        path: emulator.log
        retention-days: 90

  install-and-build-android:
    needs: test-coverage-report
    runs-on: ubuntu-latest
    env:
      ENTRY_FILE: "index.tsx"
    timeout-minutes: 30
    strategy:
      matrix:
        node-version: [20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        # https://devcenter.heroku.com/articles/nodejs-support#specifying-a-node-js-version

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: "yarn"

    - name: Expose yarn config as "$GITHUB_OUTPUT"
      id: yarn-config
      shell: bash
      run: |
        echo "CACHE_FOLDER=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
  
    # Yarn rotates the downloaded cache archives, @see https://github.com/actions/setup-node/issues/325
    # Yarn cache is also reusable between arch and os.
    - name: Restore yarn cache
      uses: actions/cache@v3
      id: yarn-download-cache
      with:
        path: ${{ steps.yarn-config.outputs.CACHE_FOLDER }}
        key: yarn-download-cache-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          yarn-download-cache-

    # Invalidated on yarn.lock changes
    - name: Restore yarn install state
      id: yarn-install-state-cache
      uses: actions/cache@v3
      with:
        path: .yarn/ci-cache/
        key: ${{ runner.os }}-yarn-install-state-cache-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

    - run: yarn install --immutable --inline-builds
      env:
        # CI optimizations. Overrides yarnrc.yml options (or their defaults) in the CI action.
        YARN_ENABLE_GLOBAL_CACHE: 'false' # Use local cache folder to keep downloaded archives
        YARN_NM_MODE: 'hardlinks-local' # Hardlinks-(local|global) reduces io / node_modules size
        YARN_INSTALL_STATE_PATH: .yarn/ci-cache/install-state.gz # Very small speedup when lock does not change
        # Other environment variables
        HUSKY: '0' # By default do not run HUSKY install
    
    # Ensure mock is set up correctly
    - name: Setup react-native-safe-area-context mock
      run: node scripts/setup_safe_area_mock.js

    # Where android build starts. one day we will have a separate job for this but i dont know how pass the node_modules cache to it
    # Set Current Date As Env Variable
    - name: Set current date as env variable
      run: echo "build_datetime=$(date +'%Y-%m-%d %H_%M_%S')" >> $GITHUB_ENV

    # Set Repository Name As Env Variable
    - name: Set repository name as env variable
      run: echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle # This already handles basic Gradle caching

    # Setup Gradle
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4.0.0
      with:
        cache-read-only: ${{ github.ref != 'refs/heads/main' }} # Only write cache on main branch
        gradle-home-cache-cleanup: true

    - name: Grant execute permission for gradlew and show version
      run: cd android && chmod +x gradlew && ./gradlew --version
      
    - name: Build with Gradle
      run: cd android && ./gradlew build --warning-mode all --info --stacktrace --build-cache

    # Create APK Debug
    - name: Build apk debug project (APK) - ${{ env.main_project_module }} module
      run: cd android && ./gradlew assembleDebug

    # Create APK Release
    - name: Build apk release project (APK) - ${{ env.main_project_module }} module
      run: cd android && ./gradlew assemble

    # Create Bundle AAB Release
    # Noted for main module build [main_project_module]:bundleRelease
    - name: Build app bundle release (AAB) - ${{ env.main_project_module }} module
      run: cd android && ./gradlew ${{ env.main_project_module }}:bundleRelease

    - uses: r0adkll/sign-android-release@v1
      name: Sign debug app APKs
      # ID used to access action output
      id: sign_debug_app
      with:
        releaseDirectory: android/${{ env.main_project_module }}/build/outputs/apk/debug/
        signingKeyBase64: ${{ secrets.DEBUG_SIGNING_KEYSTORE }}
        alias: ${{ secrets.DEBUG_KEYSTORE_ALIAS }}
        keyStorePassword: ${{ secrets.DEBUG_KEYSTORE_PASSWORD }}
        keyPassword: ${{ secrets.DEBUG_KEYSTORE_ALIAS_PASS }}
      env:
        # override default build-tools version (33.0.0) -- optional
        BUILD_TOOLS_VERSION: "34.0.0"

    - uses: r0adkll/sign-android-release@v1
      name: Sign RELEASE app APKs
      # ID used to access action output
      id: sign_release_app
      with:
        releaseDirectory: android/${{ env.main_project_module }}/build/outputs/apk/release/
        signingKeyBase64: ${{ secrets.RELEASE_SIGNING_KEYSTORE }}
        alias: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
        keyStorePassword: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
        keyPassword: ${{ secrets.RELEASE_KEYSTORE_ALIAS_PASS }}
      env:
        # override default build-tools version (33.0.0) -- optional
        BUILD_TOOLS_VERSION: "34.0.0"
    
    - uses: r0adkll/sign-android-release@v1
      name: Sign RELEASE app AABs
      # ID used to access action output
      id: sign_release_aab
      with:
        releaseDirectory: android/${{ env.main_project_module }}/build/outputs/bundle/release/
        signingKeyBase64: ${{ secrets.RELEASE_SIGNING_KEYSTORE }}
        alias: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
        keyStorePassword: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
        keyPassword: ${{ secrets.RELEASE_KEYSTORE_ALIAS_PASS }}
      env:
        # override default build-tools version (33.0.0) -- optional
        BUILD_TOOLS_VERSION: "34.0.0"

    # Rename APKs
    # for tags: calendar_notifications_plus-1.2.3-debug.apk
    # for PRs: calendar_notifications_plus-pr-123-feature-branch-abcdef-debug.apk
    # for pushes to branches other than main: calendar_notifications_plus-feature-branch-abcdef-debug.apk
    # for split APKs: calendar_notifications_plus-1.2.3-arm64-v8a-release.apk, calendar_notifications_plus-1.2.3-x86_64-release.apk
    - name: Rename APKs
      run: |
        sanitize_branch_name() {
          echo "$1" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//' | cut -c1-20
        }

        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # For tags
          VERSION=${GITHUB_REF#refs/tags/v}
          SUFFIX="-${VERSION}"
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          # For pull requests
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          BRANCH_NAME=$(sanitize_branch_name "$GITHUB_HEAD_REF")
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          SUFFIX="-pr-${PR_NUMBER}-${BRANCH_NAME}-${SHORT_SHA}"
        else
          # For pushes to branches other than main
          BRANCH_NAME=$(sanitize_branch_name "${GITHUB_REF#refs/heads/}")
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          SUFFIX="-${BRANCH_NAME}-${SHORT_SHA}"
        fi

        # Handle multiple APKs including split APKs
        mkdir -p renamed_apks
        
        # For debug APK
        if [[ -f "${{steps.sign_debug_app.outputs.signedReleaseFile}}" ]]; then
          echo "Copying signed debug APK..."
          cp ${{steps.sign_debug_app.outputs.signedReleaseFile}} renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-debug.apk
        fi
        
        # For debug APKs - Process architecture-specific debug builds if they exist
        # This handles APKs split by ABI (arm64-v8a, x86_64) due to the splits{} configuration in build.gradle
        echo "Processing debug APKs including split APKs by architecture..."
        for apk in $(find android/${{ env.main_project_module }}/build/outputs/apk/debug/ -name "*-signed.apk"); do
          filename=$(basename "$apk")
          echo "Processing debug APK: $filename"
          
          # Extract architecture info if it exists in the filename
          if [[ "$filename" == *"arm64-v8a"* ]]; then
            echo "Detected arm64-v8a debug APK"
            cp "$apk" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-arm64-v8a-debug.apk
          elif [[ "$filename" == *"x86_64"* ]]; then
            echo "Detected x86_64 debug APK"
            cp "$apk" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-x86_64-debug.apk
          fi
        done
        
        # For release APKs - Handle split APKs by architecture
        # This handles APKs split by ABI (arm64-v8a, x86_64) due to the splits{} configuration in build.gradle
        echo "Processing release APKs including split APKs by architecture..."
        for apk in $(find android/${{ env.main_project_module }}/build/outputs/apk/release/ -name "*-signed.apk"); do
          filename=$(basename "$apk")
          echo "Processing APK: $filename"
          
          # Extract architecture info if it exists in the filename
          if [[ "$filename" == *"arm64-v8a"* ]]; then
            echo "Detected arm64-v8a APK"
            cp "$apk" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-arm64-v8a-release.apk
          elif [[ "$filename" == *"x86_64"* ]]; then
            echo "Detected x86_64 APK"
            cp "$apk" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-x86_64-release.apk
          else
            # For non-split or universal APK
            echo "Detected universal APK (or APK without architecture in filename)"
            cp "$apk" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-universal-release.apk
          fi
        done
        
        # For AAB (App Bundle)
        if [[ -f "${{steps.sign_release_aab.outputs.signedReleaseFile}}" ]]; then
          echo "Copying signed AAB file..."
          cp ${{steps.sign_release_aab.outputs.signedReleaseFile}} renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}.aab
        fi
        
        # List all renamed files for verification
        echo "Renamed files:"
        ls -la renamed_apks/

    # Upload Artifact Build
    # Debug APK for development testing - includes architecture-specific variants if available
    - name: Upload SIGNED APK Debug - ${{ env.repository_name }}
      uses: actions/upload-artifact@v4
      with:
        name: signed - ${{ matrix.node-version }} - ${{ env.build_datetime }} - ${{ env.app_name }} - ${{ env.repository_name }} - APK(s) debug generated
        path: renamed_apks/${{env.app_file_name_prefix}}-*-debug.apk

    # Upload Artifact Build - Release APKs for all architectures
    # Includes architecture-specific APKs (arm64-v8a, x86_64) based on splits{} configuration
    - name: Upload SIGNED APK RELEASE - ${{ env.repository_name }}
      uses: actions/upload-artifact@v4
      with:
        name: signed - ${{ matrix.node-version }} - ${{ env.build_datetime }} - ${{ env.app_name }} - ${{ env.repository_name }} - APK(s) release generated
        path: renamed_apks/${{env.app_file_name_prefix}}-*-release.apk

    # Upload Artifact Build for Google Play Store submission
    - name: Upload SIGNED AAB (App Bundle) Release - ${{ env.repository_name }}
      uses: actions/upload-artifact@v4
      with:
        name: signed - ${{ matrix.node-version }} - ${{ env.build_datetime }} - ${{ env.app_name }} - ${{ env.repository_name }} - App bundle(s) AAB release generated
        path: renamed_apks/${{env.app_file_name_prefix}}-*.aab

    - name: Comment PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const workflowUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Build artifacts for this PR are available:

            - [Debug APKs (universal, arm64-v8a, x86_64)](${workflowUrl}#artifacts)
            - [Release APKs (arm64-v8a, x86_64)](${workflowUrl}#artifacts)
            - [AAB](${workflowUrl}#artifacts)

            You can download these artifacts from the "Artifacts" section of the workflow run.`
          });

    - name: Generate Changelog
      run: |
        echo "# Release ${GITHUB_REF#refs/tags/}" > ${{ github.workspace }}-CHANGELOG.txt
        echo "" >> ${{ github.workspace }}-CHANGELOG.txt
        echo "## What's Changed" >> ${{ github.workspace }}-CHANGELOG.txt
        git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"* %s" >> ${{ github.workspace }}-CHANGELOG.txt

    # Create a GitHub Release when a tag is pushed
    # Includes all APK variants (arm64-v8a, x86_64) and AAB
    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        body_path: ${{ github.workspace }}-CHANGELOG.txt
        files: |
          renamed_apks/${{env.app_file_name_prefix}}*-debug.apk
          renamed_apks/${{env.app_file_name_prefix}}*-release.apk
          renamed_apks/${{env.app_file_name_prefix}}*.aab