# about runners https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
name: CNPlus CI (Android) App Build

env:
  # The name of the main module repository
  main_project_module: app

  # The name of the Play Store
  app_name: "Calendar Notifications Plus"

  app_file_name_prefix: "calendar_notifications_plus"

  # Explicitly set CI flag to true for our Gradle task
  CI: true

  # Android Emulator Configuration
  ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL: 5
  ANDROID_API_LEVEL: 34
  ANDROID_TARGET: google_apis
  ANDROID_ARCH: x86_64
  ANDROID_PROFILE: 7.6in Foldable
  ANDROID_BUILD_TOOLS_VERSION: "34.0.0"
  
  # Define constant for each job to use
  GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.workers.max=4 -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"

on:
  push:
    tags:
      - '**'
  pull_request:
    branches:
      - "**" # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#patterns-to-match-branches-and-tags

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    name: Build Android App
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm64-v8a, x86_64]
      # Add fail-fast:false to allow both architectures to complete independently
      fail-fast: false
    env:
      ENTRY_FILE: "index.tsx"
      GRADLE_ABI: ${{ matrix.arch }}
      BUILD_ARCH: ${{ matrix.arch }}
    timeout-minutes: 30
    outputs:
      build_datetime: ${{ steps.set_date.outputs.build_datetime }}
      repository_name: ${{ steps.set_repo.outputs.repository_name }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1 # Shallow clone for faster checkout
    
    # Set current date and repository name
    - name: Set current date as env variable
      id: set_date
      run: |
        echo "build_datetime=$(date +'%Y-%m-%d %H_%M_%S')" >> $GITHUB_OUTPUT

    - name: Set repository name as env variable
      id: set_repo
      run: |
        echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
        echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_OUTPUT
    
    # Execute the common setup
    - name: Common Setup
      id: common-setup
      uses: ./.github/actions/common-setup
      with:
        gradle_max_workers: "4"
        node_version: "22.x"
        arch: ${{ matrix.arch }}

    # Note: All caches are now handled in common-setup

    # Note that the arch is set in android/app/build.gradle through the BUILD_ARCH environment variable
    - name: Build CMake components first
      if: steps.common-setup.outputs.ndk-cache-hit != 'true'
      run: |
        cd android && \
        ./gradlew externalNativeBuildDebug \
                  externalNativeBuildRelease \
        --parallel --max-workers=4 --build-cache

    - name: Build Android APKs (Debug and Release) with Gradle
      run: |
        cd android && \
        ./gradlew :${{ env.main_project_module }}:assemble${{ matrix.arch == 'arm64-v8a' && 'Arm64V8a' || 'X8664' }}Debug \
                  :${{ env.main_project_module }}:assemble${{ matrix.arch == 'arm64-v8a' && 'Arm64V8a' || 'X8664' }}Release \
                  :${{ env.main_project_module }}:bundle${{ matrix.arch == 'arm64-v8a' && 'Arm64V8a' || 'X8664' }}Release \
                  :${{ env.main_project_module }}:assemble${{ matrix.arch == 'arm64-v8a' && 'Arm64V8a' || 'X8664' }}DebugAndroidTest \
        --parallel --max-workers=4 --build-cache \
        -Pandroid.prefabPublishing=true \
        -Pandroid.prefabPackageType=STATIC

    # Save the build artifacts to be used in other jobs
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-artifacts-${{ matrix.arch }}
        path: android/${{ env.main_project_module }}/build/outputs/apk/
        retention-days: 1
        if-no-files-found: error

    - name: Upload Bundle artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-bundle-artifacts-${{ matrix.arch }}
        path: android/${{ env.main_project_module }}/build/outputs/bundle/
        retention-days: 1
        if-no-files-found: error

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: android-test-coverage-report
        path: |
          android/app/build/reports/jacoco/jacocoAndroidTestReport/
          android/app/build/outputs/code_coverage/debugAndroidTest/connected/
        retention-days: 90
        
    # Update caches at the end of the job
    - name: Update JS Bundle and Assets Cache
      if: always()
      uses: actions/cache@v4
      with:
        path: |
          android/app/src/main/assets/index.android.bundle
          android/app/src/main/res/drawable-*
          android/app/src/main/res/raw-*
        key: ${{ runner.os }}-js-bundle-${{ hashFiles('package.json', 'yarn.lock') }}-${{ hashFiles('src/**/*.{js,jsx,ts,tsx}', 'lib/**/*.{js,jsx,ts,tsx}', 'modules/**/*.{js,jsx,ts,tsx}', 'App.{js,jsx,ts,tsx}', 'index.{js,jsx,ts,tsx}') }}
        
    - name: Update CMake Cache
      if: always()
      uses: actions/cache@v4
      with:
        path: |
          .cxx
          ~/.android/ndk
          ~/.android/cmake
          android/app/.cxx
          android/app/build/intermediates/cmake
          android/app/build/intermediates/merged_native_libs
          android/app/build/intermediates/stripped_native_libs
          android/app/build/intermediates/transforms
          android/app/build/intermediates/prefab
          android/app/build/intermediates/prefab_package
          android/app/build/intermediates/prefab_metadata
        key: ${{ runner.os }}-cmake-${{ matrix.arch }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/CMakeLists.txt', '**/*.cmake', '**/*.cpp', '**/*.h', '**/*.hpp', '**/*.so') }}
      
    - name: Update Build Outputs Cache
      if: always()
      uses: actions/cache@v4
      with:
        path: |
          android/app/build/intermediates
          android/app/build/tmp
          android/app/build/generated
          android/app/build/outputs
          android/app/build/intermediates/instrumented_classes
          android/app/build/intermediates/test_apk
          android/app/build/intermediates/test_apk_androidTest
        key: ${{ runner.os }}-build-outputs-${{ matrix.arch }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-${{ github.sha }}

  sign:
    name: Sign Android APKs and Bundles (${{ matrix.arch }})
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm64-v8a, x86_64]
    env:
      ENTRY_FILE: "index.tsx"
      GRADLE_ABI: ${{ matrix.arch }}
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      # Import build variables from build job
      - name: Set build variables
        run: |
          echo "build_datetime=${{ needs.build.outputs.build_datetime }}" >> $GITHUB_ENV
          echo "repository_name=${{ needs.build.outputs.repository_name }}" >> $GITHUB_ENV
          
      # Download build artifacts for current architecture
      - name: Download APK artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-apk-artifacts-${{ matrix.arch }}
          path: artifacts/apk/

      - name: Download Bundle artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-bundle-artifacts-${{ matrix.arch }}
          path: artifacts/bundle/
      
      # Prepare directory structure for signing
      - name: Prepare directories for signing
        run: |
          mkdir -p signing/apk/debug
          mkdir -p signing/apk/release
          mkdir -p signing/bundle/release
          
          # Organize APKs by type
          find artifacts/apk/ -path "*/debug/*" -name "*.apk" -exec cp {} signing/apk/debug/ \;
          find artifacts/apk/ -path "*/release/*" -name "*.apk" -exec cp {} signing/apk/release/ \;
          find artifacts/bundle/ -name "*.aab" -exec cp {} signing/bundle/release/ \;
          
          # Verify contents
          echo "Files to sign:"
          find signing -type f | sort

      # Sign the APKs and AAB
      - uses: r0adkll/sign-android-release@v1
        name: Sign debug app APKs
        id: sign_debug_app
        with:
          releaseDirectory: signing/apk/debug/
          signingKeyBase64: ${{ secrets.DEBUG_SIGNING_KEYSTORE }}
          alias: ${{ secrets.DEBUG_KEYSTORE_ALIAS }}
          keyStorePassword: ${{ secrets.DEBUG_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.DEBUG_KEYSTORE_ALIAS_PASS }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}

      - uses: r0adkll/sign-android-release@v1
        name: Sign RELEASE app APKs
        id: sign_release_app
        with:
          releaseDirectory: signing/apk/release/
          signingKeyBase64: ${{ secrets.RELEASE_SIGNING_KEYSTORE }}
          alias: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
          keyStorePassword: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.RELEASE_KEYSTORE_ALIAS_PASS }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}
      
      - uses: r0adkll/sign-android-release@v1
        name: Sign RELEASE app AABs
        id: sign_release_aab
        with:
          releaseDirectory: signing/bundle/release/
          signingKeyBase64: ${{ secrets.RELEASE_SIGNING_KEYSTORE }}
          alias: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
          keyStorePassword: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.RELEASE_KEYSTORE_ALIAS_PASS }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}

      # Rename APKs
      - name: Rename and organize signed artifacts
        run: |
          mkdir -p renamed_apks
          
          sanitize_branch_name() {
            echo "$1" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//' | cut -c1-20
          }

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # For tags
            VERSION=${GITHUB_REF#refs/tags/v}
            SUFFIX="-${VERSION}"
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            # For pull requests
            PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
            BRANCH_NAME=$(sanitize_branch_name "$GITHUB_HEAD_REF")
            SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
            SUFFIX="-pr-${PR_NUMBER}-${BRANCH_NAME}-${SHORT_SHA}"
          else
            # For pushes to branches other than main
            BRANCH_NAME=$(sanitize_branch_name "${GITHUB_REF#refs/heads/}")
            SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
            SUFFIX="-${BRANCH_NAME}-${SHORT_SHA}"
          fi
          
          # Find and rename signed debug APKs
          find signing/apk/debug/ -name "*-signed.apk" | while read apk; do
            cp "$apk" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-${{ matrix.arch }}-debug.apk
          done
          
          # Find and rename signed release APKs
          find signing/apk/release/ -name "*-signed.apk" | while read apk; do
            cp "$apk" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-${{ matrix.arch }}-release.apk
          done
          
          # Find and rename signed AABs
          find signing/bundle/release/ -name "*-signed.aab" | while read aab; do
            cp "$aab" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-${{ matrix.arch }}.aab
          done
          
          # List all renamed files
          echo "Renamed files:"
          ls -la renamed_apks/

      # Upload signed artifacts
      - name: Upload SIGNED APK Debug
        uses: actions/upload-artifact@v4
        with:
          name: "signed-${{ needs.build.outputs.build_datetime }}-${{ env.app_name }}-APK-debug-${{ matrix.arch }}"
          path: renamed_apks/${{env.app_file_name_prefix}}-*-debug.apk

      - name: Upload SIGNED APK RELEASE
        uses: actions/upload-artifact@v4
        with:
          name: "signed-${{ needs.build.outputs.build_datetime }}-${{ env.app_name }}-APK-release-${{ matrix.arch }}"
          path: renamed_apks/${{env.app_file_name_prefix}}-*-release.apk

      - name: Upload SIGNED AAB (App Bundle) Release
        uses: actions/upload-artifact@v4
        with:
          name: "signed-${{ needs.build.outputs.build_datetime }}-${{ env.app_name }}-AAB-release-${{ matrix.arch }}"
          path: renamed_apks/${{env.app_file_name_prefix}}-*.aab

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        arch: [x86_64] # Only test on x86_64 to save time and resources
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    
    # Execute the common setup
    - name: Common Setup
      uses: ./.github/actions/common-setup
      with:
        gradle_max_workers: "4"
        node_version: "22.x"
    
    # Run the unit tests
    - name: Run Unit Tests
      run: |
        cd android && \
        ./gradlew :${{ env.main_project_module }}:test${{ matrix.arch == 'arm64-v8a' && 'Arm64V8a' || 'X8664' }}DebugUnitTest \
                  :${{ env.main_project_module }}:jacocoTestDebugUnitTestReport \
        --continue

    # Create test report
    - name: Publish Test Report
      uses: dorny/test-reporter@v1
      if: always()  # Run even if tests fail
      with:
        name: Unit Test Results
        path: android/app/build/test-results/testDebugUnitTest/**/*.xml
        reporter: java-junit
        fail-on-error: false

    # Upload test results
    - name: Upload Unit Test Results
      if: always() # Always upload results even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: |
          android/app/build/reports/tests/testDebugUnitTest/
          android/app/build/test-results/testDebugUnitTest/
          android/app/build/reports/jacoco/jacocoTestDebugUnitTestReport/
        retention-days: 90
        
  integration-test:
    name: Test Android App
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64] # Only test on x86_64 to save time and resources
      fail-fast: false
    env:
      ENTRY_FILE: "index.tsx"
      GRADLE_ABI: ${{ matrix.arch }}
      BUILD_ARCH: ${{ matrix.arch }}
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    
    # Execute the common setup with emulator configuration
    - name: Common Setup
      id: common-setup
      uses: ./.github/actions/common-setup
      with:
        gradle_max_workers: "4"
        node_version: "22.x"
        arch: ${{ matrix.arch }}
        android_api_level: ${{ env.ANDROID_API_LEVEL }}
        android_target: ${{ env.ANDROID_TARGET }}
        android_profile: ${{ env.ANDROID_PROFILE }}
        run_emulator_setup: "true"

    # Download the build artifacts - only for the architecture being tested
    - name: Download APK artifacts
      uses: actions/download-artifact@v4
      with:
        name: android-apk-artifacts-${{ matrix.arch }}
        path: android/${{ env.main_project_module }}/build/outputs/apk/

    # Enable KVM for Emulator
    - name: Enable KVM for Emulator
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Make wait script executable
      run: chmod +x scripts/wait_for_emulator.sh

    - name: Make test script executable
      run: chmod +x scripts/run_android_tests.sh

    - name: Run Android Tests with Coverage
      id: run_tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        target: ${{ env.ANDROID_TARGET }}
        arch: ${{ matrix.arch }}
        profile: ${{ env.ANDROID_PROFILE }}
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot -memory 2048
        disable-animations: true
        script: |
          ./scripts/wait_for_emulator.sh && ./scripts/run_android_tests.sh ${{ matrix.arch }} ${{ env.main_project_module }} ${{ env.ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL }}

    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: android-test-coverage-report
        path: |
          android/app/build/reports/jacoco/jacocoAndroidTestReport/
          android/app/build/outputs/code_coverage/debugAndroidTest/connected/
        retention-days: 90

    - name: Upload Emulator Log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: emulator-log
        path: emulator.log
        retention-days: 90
        
    # Update Android SDK and AVD cache
    - name: Update Android SDK and AVD Cache
      if: always()
      uses: actions/cache@v4
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
          ~/.android/sdk/*
          ~/.android/repositories.cfg
        key: ${{ runner.os }}-android-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

  comment-pr:
    name: Comment on PR with build links
    if: github.event_name == 'pull_request'
    needs: sign
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const workflowUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Build artifacts for this PR are available:

              - [Debug APKs (arm64-v8a, x86_64)](${workflowUrl}#artifacts)
              - [Release APKs (arm64-v8a, x86_64)](${workflowUrl}#artifacts)
              - [AAB](${workflowUrl}#artifacts)

              You can download these artifacts from the "Artifacts" section of the workflow run.`
            });

  create-release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: sign
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: signed-*
          path: artifacts
      
      - name: Generate Changelog
        run: |
          echo "# Release ${GITHUB_REF#refs/tags/}" > ${{ github.workspace }}-CHANGELOG.txt
          echo "" >> ${{ github.workspace }}-CHANGELOG.txt
          echo "## What's Changed" >> ${{ github.workspace }}-CHANGELOG.txt
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"* %s" >> ${{ github.workspace }}-CHANGELOG.txt
      
      - name: Organize release files
        run: |
          mkdir -p release_files
          find artifacts/ -name "*.apk" -o -name "*.aab" | xargs -I{} cp {} release_files/
      
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: ${{ github.workspace }}-CHANGELOG.txt
          files: release_files/*