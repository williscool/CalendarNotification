# about runners https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
name: CNPlus CI (Android) App Build

env:
  # The name of the main module repository
  main_project_module: app

  # The name of the Play Store
  app_name: "Calendar Notifications Plus"

  app_file_name_prefix: "calendar_notifications_plus"

  # Explicitly set CI flag to true for our Gradle task
  CI: true

  # Android Emulator Configuration
  ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL: 5
  ANDROID_API_LEVEL: 34
  ANDROID_TARGET: google_apis
  ANDROID_ARCH: x86_64
  ANDROID_PROFILE: 7.6in Foldable
  ANDROID_BUILD_TOOLS_VERSION: "34.0.0"
  
  # Define constant for each job to use
  GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.workers.max=4 -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"

on:
  push:
    tags:
      - '**'
  pull_request:
    branches:
      - "**" # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#patterns-to-match-branches-and-tags

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    name: Build Android App
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm64-v8a, x86_64]
      # Add fail-fast:false to allow both architectures to complete independently
      fail-fast: false
    env:
      ENTRY_FILE: "index.tsx"
      GRADLE_ABI: ${{ matrix.arch }}
    timeout-minutes: 30
    outputs:
      build_datetime: ${{ steps.set_date.outputs.build_datetime }}
      repository_name: ${{ steps.set_repo.outputs.repository_name }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1 # Shallow clone for faster checkout
    
    # Set CPU count for Gradle
    - name: Set CPU count
      run: echo "GRADLE_MAX_WORKERS=4" >> $GITHUB_ENV
      
    - name: Use Node.js 22.x
      uses: actions/setup-node@v3
      with:
        node-version: 22.x
        cache: "yarn"

    - name: Set current date as env variable
      id: set_date
      run: |
        echo "build_datetime=$(date +'%Y-%m-%d %H_%M_%S')" >> $GITHUB_ENV
        echo "build_datetime=$(date +'%Y-%m-%d %H_%M_%S')" >> $GITHUB_OUTPUT

    # Set Repository Name As Env Variable
    - name: Set repository name as env variable
      id: set_repo
      run: |
        echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
        echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_OUTPUT

    - name: Expose yarn config as "$GITHUB_OUTPUT"
      id: yarn-config
      shell: bash
      run: |
        echo "CACHE_FOLDER=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
  
    - name: Restore yarn cache
      uses: actions/cache@v3
      id: yarn-download-cache
      with:
        path: ${{ steps.yarn-config.outputs.CACHE_FOLDER }}
        key: yarn-download-cache-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          yarn-download-cache-

    - name: Restore yarn install state
      id: yarn-install-state-cache
      uses: actions/cache@v3
      with:
        path: .yarn/ci-cache/
        key: ${{ runner.os }}-yarn-install-state-cache-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

    - run: yarn install --immutable --inline-builds
      env:
        YARN_ENABLE_GLOBAL_CACHE: 'false'
        YARN_NM_MODE: 'hardlinks-local'
        YARN_INSTALL_STATE_PATH: .yarn/ci-cache/install-state.gz
        HUSKY: '0'
    
    - name: Setup react-native-safe-area-context mock
      run: node scripts/setup_safe_area_mock.js

    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4.0.0
      with:
        cache-read-only: ${{ github.ref != 'refs/heads/main' && (github.event_name != 'pull_request' || github.event.pull_request.number != 62) }}
        gradle-home-cache-cleanup: true
        gradle-home-cache-includes: |
          caches
          notifications
          jdks
          wrapper

    - name: Grant execute permission for gradlew
      run: cd android && chmod +x gradlew

    # Cache build outputs for test job
    - name: Restore Build Outputs Cache
      uses: actions/cache@v4
      id: build-outputs-cache
      with:
        path: |
          android/app/build/intermediates
          android/app/build/tmp
          android/app/build/generated
          android/app/build/outputs
        key: ${{ runner.os }}-build-outputs-${{ matrix.arch }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-outputs-${{ matrix.arch }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-

    # Cache React Native specific files
    - name: Restore Cache React Native files
      uses: actions/cache@v4
      id: react-native-cache
      with:
        path: |
          node_modules/.cache/react-native
          node_modules/.cache/metro
          node_modules/.cache/@react-native-community/cli
        key: ${{ runner.os }}-react-native-${{ hashFiles('package.json', 'yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-react-native-

    # Cache Gradle files
    - name: Restore Cache Gradle files
      uses: actions/cache@v4
      id: gradle-cache
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android/.gradle
          android/build-cache
        key: ${{ runner.os }}-gradle-${{ matrix.arch }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-${{ matrix.arch }}-
          ${{ runner.os }}-gradle-

    # Cache NDK and CMake builds
    - name: Restore NDK and CMake Cache
      uses: actions/cache@v4
      id: ndk-cache
      with:
        path: |
          ~/.android/ndk
          ~/.android/cmake
          android/app/.cxx
        key: ${{ runner.os }}-ndk-cmake-${{ matrix.arch }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-ndk-cmake-${{ matrix.arch }}-

    # Cache JS Bundle and Assets
    - name: Restore JS Bundle and Assets Cache
      uses: actions/cache@v4
      id: js-bundle-cache
      with:
        path: |
          android/app/src/main/assets/index.android.bundle
          android/app/src/main/res/drawable-*
          android/app/src/main/res/raw-*
        key: ${{ runner.os }}-js-bundle-${{ github.sha }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx', 'package.json', 'yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-js-bundle-${{ github.sha }}-
          ${{ runner.os }}-js-bundle-

    # Generate JS bundle using our script
    - name: Generate JS Bundle
      if: steps.js-bundle-cache.outputs.cache-hit != 'true'
      run: |
        yarn bundle:android

    - name: Update JS Bundle and Assets Cache
      if: steps.js-bundle-cache.outputs.cache-hit != 'true'
      uses: actions/cache@v4
      with:
        path: |
          android/app/src/main/assets/index.android.bundle
          android/app/src/main/res/drawable-*
          android/app/src/main/res/raw-*
        key: ${{ runner.os }}-js-bundle-${{ github.sha }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx', 'package.json', 'yarn.lock') }}

    - name: Build Android APKs (Debug and Release) with Gradle
      run: |
        cd android && \
        ./gradlew :${{ env.main_project_module }}:assemble${{ matrix.arch == 'arm64-v8a' && 'Arm64V8a' || 'X8664' }}Debug :${{ env.main_project_module }}:assemble${{ matrix.arch == 'arm64-v8a' && 'Arm64V8a' || 'X8664' }}Release :${{ env.main_project_module }}:bundle${{ matrix.arch == 'arm64-v8a' && 'Arm64V8a' || 'X8664' }}Release \
        --parallel --max-workers=4 --build-cache

    - name: Update Build Outputs Cache
      uses: actions/cache@v4
      with:
        path: |
          android/app/build/intermediates
          android/app/build/tmp
          android/app/build/generated
          android/app/build/outputs
        key: ${{ runner.os }}-build-outputs-${{ matrix.arch }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-${{ github.sha }}

    # Save the build artifacts to be used in other jobs
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-artifacts-${{ matrix.arch }}
        path: android/${{ env.main_project_module }}/build/outputs/apk/
        retention-days: 1
        if-no-files-found: error

    - name: Upload Bundle artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-bundle-artifacts-${{ matrix.arch }}
        path: android/${{ env.main_project_module }}/build/outputs/bundle/
        retention-days: 1
        if-no-files-found: error

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: android-test-coverage-report
        path: android/app/build/reports/jacoco/jacocoAndroidTestReport/
        retention-days: 90

    - name: Upload Emulator Log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: emulator-log
        path: emulator.log
        retention-days: 90

  test:
    name: Test Android App
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64] # Only test on x86_64 to save time and resources
      fail-fast: false
    env:
      ENTRY_FILE: "index.tsx"
      GRADLE_ABI: ${{ matrix.arch }}
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    
    # Set CPU count for Gradle
    - name: Set CPU count
      run: echo "GRADLE_MAX_WORKERS=4" >> $GITHUB_ENV
      
    # Restore cached Gradle files
    - name: Cache Gradle files
      uses: actions/cache@v4
      id: gradle-cache
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android/.gradle
          android/build-cache
        key: ${{ runner.os }}-gradle-${{ matrix.arch }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-${{ matrix.arch }}-
          ${{ runner.os }}-gradle-

    # Download the build artifacts - only for the architecture being tested
    - name: Download APK artifacts
      uses: actions/download-artifact@v4
      with:
        name: android-apk-artifacts-${{ matrix.arch }}
        path: android/${{ env.main_project_module }}/build/outputs/apk/

    - name: Use Node.js 22.x
      uses: actions/setup-node@v3
      with:
        node-version: 22.x
        cache: "yarn"

    - name: Install dependencies
      run: yarn install --immutable --inline-builds
      env:
        YARN_ENABLE_GLOBAL_CACHE: 'false'
        YARN_NM_MODE: 'hardlinks-local'
        HUSKY: '0'

    - name: Setup react-native-safe-area-context mock
      run: node scripts/setup_safe_area_mock.js

    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4.0.0
      with:
        cache-read-only: ${{ github.ref != 'refs/heads/main' && (github.event_name != 'pull_request' || github.event.pull_request.number != 62) }}
        gradle-home-cache-cleanup: true
        gradle-home-cache-includes: |
          caches
          notifications
          jdks
          wrapper

    - name: Grant execute permission for gradlew
      run: cd android && chmod +x gradlew

    # Download build outputs from build job
    - name: Restore build outputs
      uses: actions/cache@v4
      id: build-outputs-cache
      with:
        path: |
          android/app/build/intermediates
          android/app/build/tmp
          android/app/build/generated
          android/app/build/outputs
        key: ${{ runner.os }}-build-outputs-${{ matrix.arch }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-outputs-${{ matrix.arch }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-

    - name: Enable KVM for Emulator
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Cache Android SDK and AVD
      uses: actions/cache@v4
      id: android-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
          ~/.android/sdk/*
          ~/.android/repositories.cfg
        key: ${{ runner.os }}-android-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-android-

    - name: Setup Android SDK
      if: steps.android-cache.outputs.cache-hit != 'true'
      uses: android-actions/setup-android@v3
      with:
        packages: 'tools platform-tools system-images;android-${{ env.ANDROID_API_LEVEL }};${{ env.ANDROID_TARGET }};${{ env.ANDROID_ARCH }}'
        accept-android-sdk-licenses: true
        log-accepted-android-sdk-licenses: false

    - name: create AVD and generate snapshot for caching
      if: steps.android-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        target: ${{ env.ANDROID_TARGET }}
        arch: ${{ env.ANDROID_ARCH }}
        profile: ${{ env.ANDROID_PROFILE }}
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot
        disable-animations: true
        script: |
          adb wait-for-device
          adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
          echo "Generated AVD snapshot for caching."

    - name: Make wait script executable
      run: chmod +x scripts/wait_for_emulator.sh

    - name: Run Android Tests with Coverage
      id: run_tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        target: ${{ env.ANDROID_TARGET }}
        arch: ${{ matrix.arch }}
        profile: ${{ env.ANDROID_PROFILE }}
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot -memory 2048
        disable-animations: true
        script: |
          ./scripts/wait_for_emulator.sh
          
          # Run tests with increased timeout and specific architecture
          cd android && ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL=${{ env.ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL }} ./gradlew connectedCheck --parallel --max-workers=4 --build-cache && ./gradlew jacocoAndroidTestReport --parallel --max-workers=4 --build-cache

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: android-test-coverage-report
        path: android/app/build/reports/jacoco/jacocoAndroidTestReport/
        retention-days: 90

    - name: Upload Emulator Log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: emulator-log
        path: emulator.log
        retention-days: 90

  upload:
    name: Sign and Upload Artifacts
    needs: build
    runs-on: ubuntu-latest
    env:
      ENTRY_FILE: "index.tsx"
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    
    # Set CPU count for Gradle (for any gradle operations in this job)
    - name: Set CPU count
      run: echo "GRADLE_MAX_WORKERS=4" >> $GITHUB_ENV
      
    - name: Use Node.js 22.x
      uses: actions/setup-node@v3
      with:
        node-version: 22.x
        cache: "yarn"

    - name: Install dependencies
      run: yarn install --immutable --inline-builds
      env:
        YARN_ENABLE_GLOBAL_CACHE: 'false'
        YARN_NM_MODE: 'hardlinks-local'
        HUSKY: '0'

    - name: Setup react-native-safe-area-context mock
      run: node scripts/setup_safe_area_mock.js

    # Download build artifacts
    - name: Download APK artifacts - arm64-v8a
      uses: actions/download-artifact@v4
      with:
        name: android-apk-artifacts-arm64-v8a
        path: android/${{ env.main_project_module }}/build/outputs/apk/
    
    - name: Download APK artifacts - x86_64
      uses: actions/download-artifact@v4
      with:
        name: android-apk-artifacts-x86_64
        path: android/${{ env.main_project_module }}/build/outputs/apk/
    
    - name: Download Bundle artifacts - arm64-v8a
      uses: actions/download-artifact@v4
      with:
        name: android-bundle-artifacts-arm64-v8a
        path: android/${{ env.main_project_module }}/build/outputs/bundle/
    
    - name: Download Bundle artifacts - x86_64
      uses: actions/download-artifact@v4
      with:
        name: android-bundle-artifacts-x86_64
        path: android/${{ env.main_project_module }}/build/outputs/bundle/
    
    # Import build variables from build job
    - name: Set build variables
      run: |
        echo "build_datetime=${{ needs.build.outputs.build_datetime }}" >> $GITHUB_ENV
        echo "repository_name=${{ needs.build.outputs.repository_name }}" >> $GITHUB_ENV

    # Sign the binaries
    - uses: r0adkll/sign-android-release@v1
      name: Sign debug app APKs
      id: sign_debug_app
      with:
        releaseDirectory: android/${{ env.main_project_module }}/build/outputs/apk/debug/
        signingKeyBase64: ${{ secrets.DEBUG_SIGNING_KEYSTORE }}
        alias: ${{ secrets.DEBUG_KEYSTORE_ALIAS }}
        keyStorePassword: ${{ secrets.DEBUG_KEYSTORE_PASSWORD }}
        keyPassword: ${{ secrets.DEBUG_KEYSTORE_ALIAS_PASS }}
      env:
        BUILD_TOOLS_VERSION: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}

    - uses: r0adkll/sign-android-release@v1
      name: Sign RELEASE app APKs
      id: sign_release_app
      with:
        releaseDirectory: android/${{ env.main_project_module }}/build/outputs/apk/release/
        signingKeyBase64: ${{ secrets.RELEASE_SIGNING_KEYSTORE }}
        alias: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
        keyStorePassword: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
        keyPassword: ${{ secrets.RELEASE_KEYSTORE_ALIAS_PASS }}
      env:
        BUILD_TOOLS_VERSION: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}
    
    - uses: r0adkll/sign-android-release@v1
      name: Sign RELEASE app AABs
      id: sign_release_aab
      with:
        releaseDirectory: android/${{ env.main_project_module }}/build/outputs/bundle/release/
        signingKeyBase64: ${{ secrets.RELEASE_SIGNING_KEYSTORE }}
        alias: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
        keyStorePassword: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
        keyPassword: ${{ secrets.RELEASE_KEYSTORE_ALIAS_PASS }}
      env:
        BUILD_TOOLS_VERSION: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}

    # Rename APKs
    - name: Rename APKs
      run: |
        sanitize_branch_name() {
          echo "$1" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//' | cut -c1-20
        }

        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # For tags
          VERSION=${GITHUB_REF#refs/tags/v}
          SUFFIX="-${VERSION}"
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          # For pull requests
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          BRANCH_NAME=$(sanitize_branch_name "$GITHUB_HEAD_REF")
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          SUFFIX="-pr-${PR_NUMBER}-${BRANCH_NAME}-${SHORT_SHA}"
        else
          # For pushes to branches other than main
          BRANCH_NAME=$(sanitize_branch_name "${GITHUB_REF#refs/heads/}")
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          SUFFIX="-${BRANCH_NAME}-${SHORT_SHA}"
        fi

        # Handle multiple APKs including split APKs
        mkdir -p renamed_apks
        
        # For debug APK
        if [[ -f "${{steps.sign_debug_app.outputs.signedReleaseFile}}" ]]; then
          echo "Copying signed debug APK..."
          cp ${{steps.sign_debug_app.outputs.signedReleaseFile}} renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-debug.apk
        fi
        
        # For debug APKs - Process architecture-specific debug builds if they exist
        # This handles APKs split by ABI (arm64-v8a, x86_64) due to the splits{} configuration in build.gradle
        echo "Processing debug APKs including split APKs by architecture..."
        for apk in $(find android/${{ env.main_project_module }}/build/outputs/apk/debug/ -name "*-signed.apk"); do
          filename=$(basename "$apk")
          echo "Processing debug APK: $filename"
          
          # Extract architecture info if it exists in the filename
          if [[ "$filename" == *"arm64-v8a"* ]]; then
            echo "Detected arm64-v8a debug APK"
            cp "$apk" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-arm64-v8a-debug.apk
          elif [[ "$filename" == *"x86_64"* ]]; then
            echo "Detected x86_64 debug APK"
            cp "$apk" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-x86_64-debug.apk
          fi
        done
        
        # For release APKs - Handle split APKs by architecture
        # This handles APKs split by ABI (arm64-v8a, x86_64) due to the splits{} configuration in build.gradle
        echo "Processing release APKs including split APKs by architecture..."
        for apk in $(find android/${{ env.main_project_module }}/build/outputs/apk/release/ -name "*-signed.apk"); do
          filename=$(basename "$apk")
          echo "Processing APK: $filename"
          
          # Extract architecture info if it exists in the filename
          if [[ "$filename" == *"arm64-v8a"* ]]; then
            echo "Detected arm64-v8a APK"
            cp "$apk" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-arm64-v8a-release.apk
          elif [[ "$filename" == *"x86_64"* ]]; then
            echo "Detected x86_64 APK"
            cp "$apk" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-x86_64-release.apk
          else
            # For non-split or universal APK
            echo "Detected universal APK (or APK without architecture in filename)"
            cp "$apk" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-universal-release.apk
          fi
        done
        
        # For AAB (App Bundle)
        for aab in $(find android/${{ env.main_project_module }}/build/outputs/bundle/release/ -name "*-signed.aab"); do
          filename=$(basename "$aab")
          echo "Processing AAB: $filename"
          
          # Extract architecture info if it exists in the filename
          if [[ "$filename" == *"arm64-v8a"* ]]; then
            echo "Detected arm64-v8a AAB"
            cp "$aab" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-arm64-v8a.aab
          elif [[ "$filename" == *"x86_64"* ]]; then
            echo "Detected x86_64 AAB"
            cp "$aab" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}-x86_64.aab
          else
            # For non-split or universal AAB
            echo "Detected universal AAB (or AAB without architecture in filename)"
            cp "$aab" renamed_apks/${{env.app_file_name_prefix}}${SUFFIX}.aab
          fi
        done
        
        # List all renamed files for verification
        echo "Renamed files:"
        ls -la renamed_apks/

    # Upload artifacts
    - name: Upload SIGNED APK Debug
      uses: actions/upload-artifact@v4
      with:
        name: "signed - ${build_datetime} - ${{ env.app_name }} - APK(s) debug"
        path: renamed_apks/${{env.app_file_name_prefix}}-*-debug.apk

    - name: Upload SIGNED APK RELEASE
      uses: actions/upload-artifact@v4
      with:
        name: "signed - ${build_datetime} - ${{ env.app_name }} - APK(s) release"
        path: renamed_apks/${{env.app_file_name_prefix}}-*-release.apk

    - name: Upload SIGNED AAB (App Bundle) Release
      uses: actions/upload-artifact@v4
      with:
        name: "signed - ${build_datetime} - ${{ env.app_name }} - App bundle(s) AAB release"
        path: renamed_apks/${{env.app_file_name_prefix}}-*.aab

    - name: Comment PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const workflowUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Build artifacts for this PR are available:

            - [Debug APKs (universal, arm64-v8a, x86_64)](${workflowUrl}#artifacts)
            - [Release APKs (arm64-v8a, x86_64)](${workflowUrl}#artifacts)
            - [AAB](${workflowUrl}#artifacts)

            You can download these artifacts from the "Artifacts" section of the workflow run.`
          });

    - name: Generate Changelog
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        echo "# Release ${GITHUB_REF#refs/tags/}" > ${{ github.workspace }}-CHANGELOG.txt
        echo "" >> ${{ github.workspace }}-CHANGELOG.txt
        echo "## What's Changed" >> ${{ github.workspace }}-CHANGELOG.txt
        git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"* %s" >> ${{ github.workspace }}-CHANGELOG.txt

    # Create a GitHub Release when a tag is pushed
    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        body_path: ${{ github.workspace }}-CHANGELOG.txt
        files: |
          renamed_apks/${{env.app_file_name_prefix}}*-debug.apk
          renamed_apks/${{env.app_file_name_prefix}}*-release.apk
          renamed_apks/${{env.app_file_name_prefix}}*.aab