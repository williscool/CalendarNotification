name: 'Common Setup'
description: 'Sets up Node.js, Yarn, JDK and Gradle for Android builds'

inputs:
  gradle_max_workers:
    description: 'Maximum number of Gradle workers'
    required: false
    default: "4"
  node_version:
    description: 'Node.js version to use'
    required: false
    default: "22.x"
  checkout_depth:
    description: 'Checkout depth for git'
    required: false
    default: "1"
  android_api_level:
    description: 'Android API level'
    required: false
    default: "34"
  android_build_tools_version:
    description: 'Android build tools version'
    required: false
    default: "34.0.0"
  arch:
    description: 'Architecture (arm64-v8a, x86_64)'
    required: false
    default: ""
  android_target:
    description: 'Android target'
    required: false
    default: "google_apis"
  android_profile:
    description: 'Android profile'
    required: false
    default: "7.6in Foldable"
  run_emulator_setup:
    description: 'Whether to run emulator setup steps'
    required: false
    default: "false"
  optional_cache_key:
    description: 'Optional cache key'
    required: false
    default: ""

outputs:
  build-outputs-cache-hit:
    description: 'Whether the build outputs cache was hit'
    value: ${{ steps.build-outputs-cache-restore.outputs.cache-hit }}
  android-cache-hit:
    description: 'Whether the Android SDK and AVD cache was hit'
    value: ${{ steps.android-cache.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    # Set CPU count for Gradle
    - name: Set CPU count
      run: echo "GRADLE_MAX_WORKERS=${{ inputs.gradle_max_workers }}" >> $GITHUB_ENV
      shell: bash

    - name: Use Node.js ${{ inputs.node_version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node_version }}
        cache: "yarn"

    - name: Expose yarn config as "$GITHUB_OUTPUT"
      id: yarn-config
      shell: bash
      run: |
        echo "CACHE_FOLDER=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

    # Yarn caches
    - name: Restore yarn cache
      uses: actions/cache/restore@v4
      id: yarn-download-cache-restore
      with:
        path: ${{ steps.yarn-config.outputs.CACHE_FOLDER }}
        key: yarn-download-cache-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          yarn-download-cache-

    - name: Install dependencies
      run: yarn install --immutable --inline-builds
      shell: bash
      env:
        YARN_ENABLE_GLOBAL_CACHE: 'false'
        YARN_NM_MODE: 'hardlinks-local'
        YARN_INSTALL_STATE_PATH: .yarn/ci-cache/install-state.gz
        HUSKY: '0'

    - name: Restore yarn install state
      id: yarn-install-state-cache-restore
      uses: actions/cache/restore@v4
      with:
        path: .yarn/ci-cache/
        key: ${{ runner.os }}-yarn-install-state-cache-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}
        restore-keys: |
          ${{ runner.os }}-yarn-install-state-cache-

    # Cache JS Bundle and Assets
    - name: Restore JS Bundle and Assets Cache
      uses: actions/cache/restore@v4
      id: js-bundle-cache-restore
      with:
        path: |
          android/app/src/main/assets/index.android.bundle
          android/app/src/main/res/drawable-*
          android/app/src/main/res/raw-*
        key: ${{ runner.os }}-js-bundle-${{ hashFiles('package.json', 'yarn.lock') }}-${{ hashFiles('src/**/*.{js,jsx,ts,tsx}', 'lib/**/*.{js,jsx,ts,tsx}', 'modules/**/*.{js,jsx,ts,tsx}', 'App.{js,jsx,ts,tsx}', 'index.{js,jsx,ts,tsx}') }}
        restore-keys: |
          ${{ runner.os }}-js-bundle-${{ hashFiles('package.json', 'yarn.lock') }}-
          ${{ runner.os }}-js-bundle-

    # Generate JS bundle if needed
    - name: Generate JS Bundle
      if: steps.js-bundle-cache-restore.outputs.cache-hit != 'true'
      run: yarn bundle:android --dev=true
      shell: bash

    # Note: JS Bundle is an exception - we need to save it immediately if generated
    # This is because it's used by subsequent steps and we can't wait until the end of the job

    - name: Setup react-native-safe-area-context mock
      if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
      run: node scripts/setup_safe_area_mock.js
      shell: bash

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle

    # Cache Gradle files
    - name: Restore Cache Gradle files
      uses: actions/cache/restore@v4
      id: gradle-cache-restore
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android/.gradle
          android/build-cache
        key: ${{ runner.os }}-gradle-${{ inputs.arch != '' && format('-{0}', inputs.arch) || '' }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-${{ inputs.arch != '' && format('-{0}', inputs.arch) || '' }}-
          ${{ runner.os }}-gradle-

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4.0.0
      with:
        cache-read-only: ${{ inputs.arch != 'x86_64' || github.ref != 'refs/heads/main' && (github.event_name != 'pull_request' || github.event.pull_request.number != 76) }}
        cache-overwrite-existing: ${{ inputs.arch != 'x86_64' || github.ref != 'refs/heads/main' && (github.event_name != 'pull_request' || github.event.pull_request.number != 76) }}
        gradle-home-cache-cleanup: true
        gradle-home-cache-includes: |
          caches
          notifications
          jdks
          wrapper

    # Restore Build Outputs Cache if arch is provided
    - name: Restore Build Outputs Cache
      if: inputs.arch != '' && inputs.optional_cache_key != 'integration-test'
      uses: actions/cache/restore@v4
      id: build-outputs-cache-restore
      with:
        path: |
          android/app/build/intermediates
          android/app/build/tmp
          android/app/build/generated
          android/app/build/outputs
          android/app/build/intermediates/instrumented_classes
          android/app/build/intermediates/test_apk
          android/app/build/intermediates/test_apk_androidTest
        key: ${{ runner.os }}-build-outputs-${{ inputs.arch }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-outputs-${{ inputs.arch }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-
          ${{ runner.os }}-build-outputs-${{ inputs.arch }}-

    - name: Ccachify the Native Modules
      shell: bash
      run: |
        chmod +x scripts/ccachify_native_modules.sh
        ./scripts/ccachify_native_modules.sh

    - name: Grant execute permission for gradlew
      run: cd android && chmod +x gradlew
      shell: bash

    # List all available Gradle tasks (also warms up Gradle cache)
    - name: List Gradle Tasks
      run: |
        cd android && \
        ./gradlew tasks --all > gradle-tasks.txt
        cat gradle-tasks.txt
      shell: bash

    # Cache React Native specific files
    - name: Restore Cache React Native files
      uses: actions/cache/restore@v4
      id: react-native-cache-restore
      with:
        path: |
          node_modules/.cache/react-native
          node_modules/.cache/metro
          node_modules/.cache/@react-native-community/cli
        key: ${{ runner.os }}-react-native-${{ hashFiles('package.json', 'yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-react-native-

    # Android SDK and AVD cache for emulator tests
    - name: Restore Cache Android SDK and AVD
      if: inputs.run_emulator_setup == 'true'
      uses: actions/cache@v4
      id: android-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
          ~/.android/sdk/*
          ~/.android/repositories.cfg
        key: ${{ runner.os }}-android-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-android-

    # Setup Android SDK for emulator if needed and not cached
    - name: Setup Android SDK
      if: inputs.run_emulator_setup == 'true' && steps.android-cache.outputs.cache-hit != 'true'
      uses: android-actions/setup-android@v3
      with:
        packages: 'tools platform-tools system-images;android-${{ inputs.android_api_level }};${{ inputs.android_target }};${{ inputs.arch }}'
        accept-android-sdk-licenses: true
        log-accepted-android-sdk-licenses: false

    # Enable KVM for Emulator
    - name: Enable KVM for Emulator
      # Only run if run_emulator_setup is true BUT MUST HAPPEN REGARDLESS OF WHETHER CACHE IS HIT OR NOT.
      # Emulator needs these steps to be run every time
      if: inputs.run_emulator_setup == 'true'
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
      shell: bash

    # Create AVD and generate snapshot for caching
    - name: Create AVD and generate snapshot for caching
      if: inputs.run_emulator_setup == 'true' && steps.android-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ inputs.android_api_level }}
        target: ${{ inputs.android_target }}
        arch: ${{ inputs.arch }}
        profile: ${{ inputs.android_profile }}
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot
        disable-animations: true
        script: |
          adb wait-for-device
          adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
          echo "Generated AVD snapshot for caching."

